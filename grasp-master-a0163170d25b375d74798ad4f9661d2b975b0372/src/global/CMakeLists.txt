# Copyright 2016 CNRS & Universite Lille 1. All rights reserved.
# Licensed under the GRASP Open Source License V1.0 (see LICENSE file)

include_directories(${CMAKE_CURRENT_BINARY_DIR})

# If code is tracked by git we can extrack useful information from it
# otherwise we will set as unkown info
execute_process(WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	COMMAND /usr/bin/env git name-rev --name-only --tags HEAD
	RESULT_VARIABLE result
	OUTPUT_VARIABLE GRASP_VERSION)

if(NOT ${result} EQUAL 0)
	set(GRASP_VERSION "[undefined]")
elseif(${GRASP_VERSION} STREQUAL "undefined")
	set(GRASP_VERSION "[no version]")
else()
        string(REPLACE "^0" "" GRASP_VERSION ${GRASP_VERSION})
	string(STRIP ${GRASP_VERSION} GRASP_VERSION)
endif()

execute_process(WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	COMMAND /usr/bin/env git rev-parse --abbrev-ref HEAD
	RESULT_VARIABLE result
	OUTPUT_VARIABLE GRASP_BRANCH_NAME)
if(NOT ${result} EQUAL 0)
	set(GRASP_BRANCH_NAME "[undefined]")
elseif(GRASP_BRANCH_NAME STREQUAL "HEAD")
	set(GRASP_BRANCH_NAME "[no-branch]")
else()
	string(STRIP ${GRASP_BRANCH_NAME} GRASP_BRANCH_NAME)
endif()

execute_process(WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	COMMAND /usr/bin/env git rev-parse --short HEAD
	RESULT_VARIABLE result
	OUTPUT_VARIABLE GRASP_COMMIT_REF)
if(NOT ${result} EQUAL 0)
	set(GRASP_COMMIT_REF "[undefined]")
else()
	string(STRIP ${GRASP_COMMIT_REF} GRASP_COMMIT_REF)
endif()

execute_process(WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	COMMAND /usr/bin/env git show -s --format=%ci HEAD
	RESULT_VARIABLE result
	OUTPUT_VARIABLE GRASP_COMMIT_DATE)
if(NOT ${result} EQUAL 0)
	set(GRASP_COMMIT_DATE "[undefined]")
else()
	string(STRIP ${GRASP_COMMIT_DATE} GRASP_COMMIT_DATE)
endif()

execute_process(WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	COMMAND "date" "+%Y-%m-%d %H:%M:%S %z"
	RESULT_VARIABLE result
	OUTPUT_VARIABLE GRASP_COMPILATION_DATE)
if(NOT ${result} EQUAL 0)
	set(GRASP_COMPILATION_DATE "[undefined]")
else()
	string(STRIP ${GRASP_COMPILATION_DATE} GRASP_COMPILATION_DATE)
endif()

execute_process(WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	COMMAND ${CMAKE_C_COMPILER} --version
	COMMAND head -n1
	RESULT_VARIABLE result
	OUTPUT_VARIABLE GRASP_CC_VERSION)
if(NOT ${result} EQUAL 0)
	set(GRASP_CC_VERSION "[compiler-unknown]")
else()
	string(STRIP ${GRASP_CC_VERSION} GRASP_CC_VERSION)
endif()

enable_language(Fortran)
execute_process(WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMAND ${CMAKE_Fortran_COMPILER} --version
	COMMAND head -n1
	RESULT_VARIABLE result
	OUTPUT_VARIABLE GRASP_FC_VERSION)
if(NOT ${result} EQUAL 0)
	set(GRASP_FC_VERSION "[compiler-unknown]")
else()
	string(STRIP ${GRASP_FC_VERSION} GRASP_FC_VERSION)
endif()

get_property(GRASP_INPUT_DRIVERS GLOBAL PROPERTY INPUT_DRIVERS)
string(REPLACE ";" " " GRASP_INPUT_DRIVERS "${GRASP_INPUT_DRIVERS}")

get_property(GRASP_INPUT_TRANSFORMERS GLOBAL PROPERTY INPUT_TRANSFORMERS)
string(REPLACE ";" " " GRASP_INPUT_TRANSFORMERS "${GRASP_INPUT_TRANSFORMERS}")

get_property(GRASP_OUTPUT_SEGMENT_FUNCTIONS GLOBAL PROPERTY OUTPUT_SEGMENT_FUNCTIONS)
string(REPLACE ";" " " GRASP_OUTPUT_SEGMENT_FUNCTIONS "${GRASP_OUTPUT_SEGMENT_FUNCTIONS}")

get_property(GRASP_OUTPUT_TILE_FUNCTIONS GLOBAL PROPERTY OUTPUT_TILE_FUNCTIONS)
string(REPLACE ";" " " GRASP_OUTPUT_TILE_FUNCTIONS "${GRASP_OUTPUT_TILE_FUNCTIONS}")

get_property(GRASP_OUTPUT_CURRENT_FUNCTIONS GLOBAL PROPERTY OUTPUT_CURRENT_FUNCTIONS)
string(REPLACE ";" " " GRASP_OUTPUT_CURRENT_FUNCTIONS "${GRASP_OUTPUT_CURRENT_FUNCTIONS}")

get_property(GRASP_INPUT_DRIVER_VERSIONS GLOBAL PROPERTY INPUT_DRIVER_VERSIONS)
string(REPLACE ";" " " GRASP_INPUT_DRIVER_VERSIONS "${GRASP_INPUT_DRIVER_VERSIONS}")

get_property(GRASP_INPUT_TRANSFORMER_VERSIONS GLOBAL PROPERTY INPUT_TRANSFORMER_VERSIONS)
string(REPLACE ";" " " GRASP_INPUT_TRANSFORMER_VERSIONS "${GRASP_INPUT_TRANSFORMER_VERSIONS}")

get_property(GRASP_OUTPUT_SEGMENT_FUNCTION_VERSIONS GLOBAL PROPERTY OUTPUT_SEGMENT_FUNCTION_VERSIONS)
string(REPLACE ";" " " GRASP_OUTPUT_SEGMENT_FUNCTION_VERSIONS "${GRASP_OUTPUT_SEGMENT_FUNCTION_VERSIONS}")

get_property(GRASP_OUTPUT_TILE_FUNCTION_VERSIONS GLOBAL PROPERTY OUTPUT_TILE_FUNCTION_VERSIONS)
string(REPLACE ";" " " GRASP_OUTPUT_TILE_FUNCTION_VERSIONS "${GRASP_OUTPUT_TILE_FUNCTION_VERSIONS}")

get_property(GRASP_OUTPUT_CURRENT_FUNCTION_VERSIONS GLOBAL PROPERTY OUTPUT_CURRENT_FUNCTION_VERSIONS)
string(REPLACE ";" " " GRASP_OUTPUT_CURRENT_FUNCTION_VERSIONS "${GRASP_OUTPUT_CURRENT_FUNCTION_VERSIONS}")

get_property(GRASP_MODELS GLOBAL PROPERTY GRASP_MODELS)

add_definitions(-DGRASP_VERSION="${GRASP_VERSION}"
	-DGRASP_BRANCH_NAME="${GRASP_BRANCH_NAME}"
	-DGRASP_COMMIT_REF="${GRASP_COMMIT_REF}"
	-DGRASP_COMMIT_DATE="${GRASP_COMMIT_DATE}"
	-DGRASP_COMPILATION_DATE="${GRASP_COMPILATION_DATE}"
	-DGRASP_CC_VERSION="${GRASP_CC_VERSION}"
	-DGRASP_FC_VERSION="${GRASP_FC_VERSION}"
	-DGRASP_BUILD_TYPE="${CMAKE_BUILD_TYPE}"
        -DGRASP_SPARSE_SOLVER="${SPARSE_LIB}"
	-DGRASP_BUILD_SYSTEM="${CMAKE_SYSTEM}"
        -DGRASP_CONSTANTS_SET="${CONSTANTS_SET}"
	-DGRASP_INPUT_DRIVERS="${GRASP_INPUT_DRIVERS}"
	-DGRASP_INPUT_TRANSFORMERS="${GRASP_INPUT_TRANSFORMERS}"
	-DGRASP_OUTPUT_SEGMENT_FUNCTIONS="${GRASP_OUTPUT_SEGMENT_FUNCTIONS}"
	-DGRASP_OUTPUT_TILE_FUNCTIONS="${GRASP_OUTPUT_TILE_FUNCTIONS}"
	-DGRASP_OUTPUT_CURRENT_FUNCTIONS="${GRASP_OUTPUT_CURRENT_FUNCTIONS}"
	-DGRASP_INPUT_DRIVER_VERSIONS="${GRASP_INPUT_DRIVER_VERSIONS}"
	-DGRASP_INPUT_TRANSFORMER_VERSIONS="${GRASP_INPUT_TRANSFORMER_VERSIONS}"
	-DGRASP_OUTPUT_SEGMENT_FUNCTION_VERSIONS="${GRASP_OUTPUT_SEGMENT_FUNCTION_VERSIONS}"
	-DGRASP_OUTPUT_TILE_FUNCTION_VERSIONS="${GRASP_OUTPUT_TILE_FUNCTION_VERSIONS}"
	-DGRASP_OUTPUT_CURRENT_FUNCTION_VERSIONS="${GRASP_OUTPUT_CURRENT_FUNCTION_VERSIONS}"
        -DGRASP_MODELS="${GRASP_MODELS}"
)

if(${USE_MPI})
	add_definitions(-DUSE_MPI)
endif()

if(${DEBUG_MPI})
        add_definitions(-DDEBUG_MPI)
endif()

add_library(grasp_global
	grasp_compilation_information.c
	grasp_parameters.c	
	grasp_runtime_information.c
)
target_link_libraries(grasp_global yamlsettings grasputils)

